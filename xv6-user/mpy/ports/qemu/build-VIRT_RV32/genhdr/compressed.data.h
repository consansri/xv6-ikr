#define MP_MAX_UNCOMPRESSED_TEXT_LEN (73)
MP_COMPRESSED_DATA("can'\364'%q\247objec\364argumen\364functio\356forma\364argument\363mus\364no\364'%s\247t\357conver\364keywor\344strin\347positiona\354specifie\362typ\345require\344inde\370ar\347attribut\345fo\362invali\344wit\350b\345o\346empt\371implemente\344isn'\364%\344assignmen\364outsid\345generato\362i\356synta\370expecte\344fro\355\341comple\370doesn'\364ha\363missin\347n\357rang\345unsupporte\344identifie\362a\356lengt\350in\364nam\345supporte\344afte\362erro\362fiel\344multipl\345nonloca\354sequenc\345allowe\344bu\364defaul\364indice\363intege\362ou\364struct\272to\357i\363lis\364zer\357impor\364numbe\362specificatio\356value\363issubclass(\251%\361%\363an\344byte\363clas\363foun\344give\356loca\354need\363o\362stor\345tupl\345valu\345wron\347allocatio\356conversio\356expressio\356implicitl\371incomplet\345unexpecte\344automati\343dic\364expectin\347hea\360integers\254numberin\347operatio\356redefine\344negativ\345overflo\367ba\344failed\254go\364se\364suppor\364unknow\356befor\345binar\371buffe\362divid\345inden\364manua\354memor\371modul\345retur\356shoul\344switc\350unpac\353asyn\343a\364extr\341leve\354o\360oute\362take\363")
MP_MATCH_COMPRESSED("%c needs int or char", "\377%c\321\260\322char")
MP_MATCH_COMPRESSED("%q index out of range", "\377\311\222\276\231\253")
MP_MATCH_COMPRESSED("%q indices must be integers, not %s", "\377\311\274\207\230\341\210\312")
MP_MATCH_COMPRESSED("'%q' argument required", "\377\201\203\221")
MP_MATCH_COMPRESSED("'%s' object doesn't support item assignment", "\377\211\202\247\353item\236")
MP_MATCH_COMPRESSED("'%s' object doesn't support item deletion", "\377\211\202\247\353item deletion")
MP_MATCH_COMPRESSED("'%s' object has no attribute '%q'", "\377\211\202\250\252\224\201")
MP_MATCH_COMPRESSED("'%s' object isn't an iterator", "\377\211\202\234\256iterator")
MP_MATCH_COMPRESSED("'%s' object isn't callable", "\377\211\202\234callable")
MP_MATCH_COMPRESSED("'%s' object isn't iterable", "\377\211\202\234iterable")
MP_MATCH_COMPRESSED("'%s' object isn't subscriptable", "\377\211\202\234subscriptable")
MP_MATCH_COMPRESSED("'=' alignment not allowed in string format specifier", "\377'=' alignment\210\271\241\215\205\217")
MP_MATCH_COMPRESSED("'await' outside function", "\377'await'\237\204")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377'break'/'continue'\237loop")
MP_MATCH_COMPRESSED("'not' not implemented", "\377'not'\210\233")
MP_MATCH_COMPRESSED("'return' outside function", "\377'return'\237\204")
MP_MATCH_COMPRESSED("'yield' outside function", "\377'yield'\237\204")
MP_MATCH_COMPRESSED("* arg after **", "\377*\223\263**")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377*x\207\230\236target")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\3770.0\212\245\246power")
MP_MATCH_COMPRESSED("I/O operation on closed file", "\377I/O\343on closed file")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377LHS\231\214\223\207\230\256id")
MP_MATCH_COMPRESSED("__init__() should return None, not '%s'", "\377__init__()\366\365None,\210\211")
MP_MATCH_COMPRESSED("abort() called", "abort() called")
MP_MATCH_COMPRESSED("address %08x is not aligned to %d bytes", "\377address %08x\301\210aligned\212\235\314")
MP_MATCH_COMPRESSED("annotation must be an identifier", "\377annotation\207\230\256\255")
MP_MATCH_COMPRESSED("arg is an empty sequence", "\377\223\301\256\232\270")
MP_MATCH_COMPRESSED("arg must be user-type", "\377\223\207\230user-type")
MP_MATCH_COMPRESSED("argument has wrong type", "\377\203\250\326\220")
MP_MATCH_COMPRESSED("argument name reused", "\377\203\261reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\203num/types mismatch")
MP_MATCH_COMPRESSED("array/bytes required on right side", "\377array/bytes\221on right side")
MP_MATCH_COMPRESSED("async for/with outside async function", "\377\371for/with\237\371\204")
MP_MATCH_COMPRESSED("attributes not supported", "\377attributes\210\262")
MP_MATCH_COMPRESSED("bad compile mode", "\377\347compile mode")
MP_MATCH_COMPRESSED("bad conversion specifier", "\377\347\330\217")
MP_MATCH_COMPRESSED("bad typecode", "\377\347typecode")
MP_MATCH_COMPRESSED("binary op %q not implemented", "\377\356\375\311\210\233")
MP_MATCH_COMPRESSED("bits must be 32 or less", "\377bits\207\23032\322less")
MP_MATCH_COMPRESSED("buffer too small", "\377\357\300small")
MP_MATCH_COMPRESSED("bytecode overflow", "\377bytecode\346")
MP_MATCH_COMPRESSED("bytes value out of range", "\377\314\325\276\231\253")
MP_MATCH_COMPRESSED("call super().__init__() first", "call super().__init__() first")
MP_MATCH_COMPRESSED("can't add special method to already-subclassed class", "\377\200add special method\212already-subclassed\315")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\200assign\212\331")
MP_MATCH_COMPRESSED("can't convert %s to complex", "\377\200\213\312\212\246")
MP_MATCH_COMPRESSED("can't convert %s to float", "\377\200\213\312\212float")
MP_MATCH_COMPRESSED("can't convert %s to int", "\377\200\213\312\212\260")
MP_MATCH_COMPRESSED("can't convert '%q' object to %q implicitly", "\377\200\213\201\202\212\311\332")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\200\213NaN\212\260")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\200\213inf\212\260")
MP_MATCH_COMPRESSED("can't create '%q' instances", "\377\200create\201instances")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\200declare\267\241\376code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\200delete\331")
MP_MATCH_COMPRESSED("can't do binary op between '%q' and '%q'", "\377\200do\356\375between\201\313\201")
MP_MATCH_COMPRESSED("can't do unary op of '%q'", "\377\200do unary\375\231\201")
MP_MATCH_COMPRESSED("can't implicitly convert '%q' to 'bool'", "\377\200\332\213\201\212'bool'")
MP_MATCH_COMPRESSED("can't import name %q", "\377\200\304\261\311")
MP_MATCH_COMPRESSED("can't load from '%q'", "\377\200load\244\201")
MP_MATCH_COMPRESSED("can't load with '%q' index", "\377\200load\227\201\222")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\200perform relative\304")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\200send non-None\325\212\245just-started\240")
MP_MATCH_COMPRESSED("can't set attribute", "\377\200\352\224")
MP_MATCH_COMPRESSED("can't store '%q'", "\377\200\323\201")
MP_MATCH_COMPRESSED("can't store to '%q'", "\377\200\323\212\201")
MP_MATCH_COMPRESSED("can't store with '%q' index", "\377\200\323\227\201\222")
MP_MATCH_COMPRESSED("can't switch from automatic field numbering to manual field specification", "\377\200\367\244\335\265\342\212\362\265\306")
MP_MATCH_COMPRESSED("can't switch from manual field specification to automatic field numbering", "\377\200\367\244\362\265\306\212\335\265\342")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\200truncate-divide\245\246\305")
MP_MATCH_COMPRESSED("can't unambiguously get sizeof scalar", "\377\200unambiguously get sizeof scalar")
MP_MATCH_COMPRESSED("casting", "casting")
MP_MATCH_COMPRESSED("chr() arg not in range(0x110000)", "\377chr()\223\210\241range(0x110000)")
MP_MATCH_COMPRESSED("comparison of int and uint", "\377comparison\231\260\313uint")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\246\360by\303")
MP_MATCH_COMPRESSED("conversion to object", "\377\330\212\202")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377\273'except'\207\230last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377\336update\270\250\326\257")
MP_MATCH_COMPRESSED("div/mod not implemented for uint", "\377div/mod\210\233\225uint")
MP_MATCH_COMPRESSED("divide by zero", "\377\360by\303")
MP_MATCH_COMPRESSED("empty", "\377\232")
MP_MATCH_COMPRESSED("empty heap", "\377\232\340")
MP_MATCH_COMPRESSED("empty separator", "\377\232separator")
MP_MATCH_COMPRESSED("error in regex", "\377\264\241regex")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\207derive\244BaseException")
MP_MATCH_COMPRESSED("expected ':' after format specifier", "\377\243':'\263\205\217")
MP_MATCH_COMPRESSED("expecting just a value for set", "\377\337just\245\325\225\352")
MP_MATCH_COMPRESSED("expecting key:value for dict", "\377\337key:value\225\336")
MP_MATCH_COMPRESSED("extra keyword arguments given", "\377\373\214\206\317")
MP_MATCH_COMPRESSED("extra positional arguments given", "\377\373\216\206\317")
MP_MATCH_COMPRESSED("format", "\377\205")
MP_MATCH_COMPRESSED("format needs a dict", "\377\205\321\245\336")
MP_MATCH_COMPRESSED("format string didn't convert all arguments", "\377\205\215didn't\213all\206")
MP_MATCH_COMPRESSED("format string needs more arguments", "\377\205\215\321more\206")
MP_MATCH_COMPRESSED("full", "full")
MP_MATCH_COMPRESSED("function doesn't take keyword arguments", "\377\204\247take\214\206")
MP_MATCH_COMPRESSED("function expected at most %d arguments, got %d", "\377\204\243\372most\235arguments,\351\235")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\204\351\266\307\225\203\201")
MP_MATCH_COMPRESSED("function missing %d required positional arguments", "\377\204\251\235\221\216\206")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\204\251keyword-only\203")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\204\251\221\214\203\201")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\204\251\221\216\203#%d")
MP_MATCH_COMPRESSED("function takes %d positional arguments but %d were given", "\377\204\377\235\216\206\272\235were\317")
MP_MATCH_COMPRESSED("generator already executing", "\377\240already executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\240ignored GeneratorExit")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\240raised StopIteration")
MP_MATCH_COMPRESSED("hash is final", "\377hash\301final")
MP_MATCH_COMPRESSED("heap must be a list", "\377\340\207\230\245\302")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\255\344as global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\255\344as\267")
MP_MATCH_COMPRESSED("import * not at module level", "\377\304*\210\372\364\374")
MP_MATCH_COMPRESSED("incomplete format", "\377\333\205")
MP_MATCH_COMPRESSED("incomplete format key", "\377\333\205key")
MP_MATCH_COMPRESSED("incorrect padding", "incorrect padding")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\2232\207\230>= 2\313<= 36")
MP_MATCH_COMPRESSED("integer needed", "\377\275needed")
MP_MATCH_COMPRESSED("invalid format", "\377\226\205")
MP_MATCH_COMPRESSED("invalid format specifier", "\377\226\205\217")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\226micropython decorator")
MP_MATCH_COMPRESSED("invalid syntax", "\377\226\242")
MP_MATCH_COMPRESSED("invalid syntax for integer with base %d", "\377\226\242\225\275\227base\235")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\226\242\225\305")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377\310\2231\207\230\245\315")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377\310\2232\207\230\245\315\322\245\324\231classes")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join expects\245\302\231str/bytes objects consistent\227self\202")
MP_MATCH_COMPRESSED("keyword argument(s) not implemented - use normal args instead", "\377\214argument(s)\210\233- use normal args instead")
MP_MATCH_COMPRESSED("lhs and rhs should be compatible", "\377lhs\313rhs\366\230compatible")
MP_MATCH_COMPRESSED("local '%q' has type '%q' but source is '%q'", "\377\320\201\250\220\201\272source\301\201")
MP_MATCH_COMPRESSED("local '%q' used before type known", "\377\320\201used\355\220known")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377\320variable referenced\355\236")
MP_MATCH_COMPRESSED("malformed f-string", "malformed f-string")
MP_MATCH_COMPRESSED("math domain error", "\377math domain\264")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "\377\363\327\350allocating %u\314")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377\363\327\350\340\301locked")
MP_MATCH_COMPRESSED("memoryview offset too large", "\377memoryview offset\300large")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\266*x\241\236")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\266bases have instance lay-out conflict")
MP_MATCH_COMPRESSED("must raise an object", "\377\207raise\256\202")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\207use\214\203\225key\204")
MP_MATCH_COMPRESSED("name '%q' isn't defined", "\377\261\201\234defined")
MP_MATCH_COMPRESSED("name too long", "\377\261\300long")
MP_MATCH_COMPRESSED("native yield", "native yield")
MP_MATCH_COMPRESSED("need more than %d values to unpack", "\377need more than\235\307\212\370")
MP_MATCH_COMPRESSED("negative factorial", "\377\345factorial")
MP_MATCH_COMPRESSED("negative shift count", "\377\345shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\252active exception\212reraise")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\252binding\225\267\316")
MP_MATCH_COMPRESSED("no default seed", "\377\252\273seed")
MP_MATCH_COMPRESSED("no module named '%q'", "\377\252\364named\201")
MP_MATCH_COMPRESSED("no such attribute", "\377\252such\224")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\203follows\273\203")
MP_MATCH_COMPRESSED("non-hex digit", "non-hex digit")
MP_MATCH_COMPRESSED("not a constant", "\377\210\245constant")
MP_MATCH_COMPRESSED("object '%s' isn't a tuple or list", "\377\202\211\234\245\324\322\302")
MP_MATCH_COMPRESSED("object not in sequence", "\377\202\210\241\270")
MP_MATCH_COMPRESSED("object of type '%s' has no len()", "\377\202\231\220\211\250\252len()")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\202\227\357protocol\221")
MP_MATCH_COMPRESSED("only slices with step=1 (aka None) are supported", "\377only slices\227step=1 (aka None) are\262")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("ord() expected a character, but string of length %d found", "\377ord()\243\245character,\272\215\231\257\235\316")
MP_MATCH_COMPRESSED("overflow converting long int to machine word", "\377\346converting long\260\212machine word")
MP_MATCH_COMPRESSED("pop from an empty set", "\377pop\244\256\232\352")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\244\232\302")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\301\232")
MP_MATCH_COMPRESSED("positional arg after **", "\377\216\223\263**")
MP_MATCH_COMPRESSED("positional arg after keyword arg", "\377\216\223\263\214\223")
MP_MATCH_COMPRESSED("pow() with 3 arguments requires integers", "\377pow()\2273\206requires integers")
MP_MATCH_COMPRESSED("requested length %d but object has length %d", "\377requested\257\235\272\202\250\257\235")
MP_MATCH_COMPRESSED("return expected '%q' but got '%q'", "\377\365\243\201\272\351\201")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("schedule queue full", "schedule queue full")
MP_MATCH_COMPRESSED("sign not allowed in string format specifier", "\377sign\210\271\241\215\205\217")
MP_MATCH_COMPRESSED("sign not allowed with integer format specifier 'c'", "\377sign\210\271\227\275\205\217'c'")
MP_MATCH_COMPRESSED("single '}' encountered in format string", "\377single '}' encountered\241\205\215")
MP_MATCH_COMPRESSED("slice step can't be zero", "\377slice step\200\230\303")
MP_MATCH_COMPRESSED("splitting with sub-captures", "\377splitting\227sub-captures")
MP_MATCH_COMPRESSED("start/end indices", "\377start/end\274")
MP_MATCH_COMPRESSED("stream operation not supported", "\377stream\343\210\262")
MP_MATCH_COMPRESSED("string argument without an encoding", "\377\215\203without\256encoding")
MP_MATCH_COMPRESSED("string index out of range", "\377\215\222\276\231\253")
MP_MATCH_COMPRESSED("string indices must be integers, not %s", "\377\215\274\207\230\341\210\312")
MP_MATCH_COMPRESSED("struct: can't index", "\377\277\200\222")
MP_MATCH_COMPRESSED("struct: index out of range", "\377\277\222\276\231\253")
MP_MATCH_COMPRESSED("struct: no fields", "\377\277\252fields")
MP_MATCH_COMPRESSED("substring not found", "\377substring\210\316")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\200find self")
MP_MATCH_COMPRESSED("syntax error in JSON", "\377\242\264\241JSON")
MP_MATCH_COMPRESSED("syntax error in uctypes descriptor", "\377\242\264\241uctypes descriptor")
MP_MATCH_COMPRESSED("too many args", "\377\300many args")
MP_MATCH_COMPRESSED("too many values to unpack (expected %d)", "\377\300many\307\212\370(expected %d)")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\324\222\276\231\253")
MP_MATCH_COMPRESSED("type '%q' isn't an acceptable base type", "\377\220\201\234\256acceptable base\220")
MP_MATCH_COMPRESSED("type object '%q' has no attribute '%q'", "\377\220\202\201\250\252\224\201")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\220\3771\3223\206")
MP_MATCH_COMPRESSED("unexpected indent", "\377\334\361")
MP_MATCH_COMPRESSED("unexpected keyword argument '%q'", "\377\334\214\203\201")
MP_MATCH_COMPRESSED("unicode name escapes", "\377unicode\261escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\247match any\376\361\374")
MP_MATCH_COMPRESSED("unknown format code '%c' for object of type '%s'", "\377\354\205code '%c'\225\202\231\220\211")
MP_MATCH_COMPRESSED("unknown type '%q'", "\377\354\220\201")
MP_MATCH_COMPRESSED("unmatched '{' in format", "\377unmatched '{'\241\205")
MP_MATCH_COMPRESSED("unreadable attribute", "\377unreadable\224")
MP_MATCH_COMPRESSED("unsupported format character '%c' (0x%x) at index %d", "\377\254\205character '%c' (0x%x)\372\222\235")
MP_MATCH_COMPRESSED("unsupported type for %q: '%s'", "\377\254\220\225%q:\211")
MP_MATCH_COMPRESSED("unsupported types for %q: '%s', '%s'", "\377\254types\225%q: '%s',\211")
MP_MATCH_COMPRESSED("wbits", "wbits")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377\326\305\231\206")
MP_MATCH_COMPRESSED("zero step", "\377\303step")
// Total input length:      6182
// Total compressed length: 2890
// Total data length:       1140
// Predicted saving:        2152

// gzip length:             3434
// Percentage of gzip:      117.4%
// zlib length:             3422
// Percentage of zlib:      117.8%
